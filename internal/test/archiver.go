package test

// Don't edit this file.
// This file is generated by gomic 0.5.2.
// https://github.com/suzuki-shunsuke/gomic

import (
	"io"
	testing "testing"

	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// Archiver is a mock.
	Archiver struct {
		t                      *testing.T
		name                   string
		callbackNotImplemented gomic.CallbackNotImplemented
		impl                   struct {
			Read func(input io.Reader, destination string) error
		}
	}
)

// NewArchiver returns Archiver .
func NewArchiver(t *testing.T, cb gomic.CallbackNotImplemented) *Archiver {
	return &Archiver{
		t: t, name: "Archiver", callbackNotImplemented: cb}
}

// Read is a mock method.
func (mock Archiver) Read(input io.Reader, destination string) error {
	methodName := "Read" // nolint: goconst
	if mock.impl.Read != nil {
		return mock.impl.Read(input, destination)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroRead(input, destination)
}

// SetFuncRead sets a method and returns the mock.
func (mock *Archiver) SetFuncRead(impl func(input io.Reader, destination string) error) *Archiver {
	mock.impl.Read = impl
	return mock
}

// SetReturnRead sets a fake method.
func (mock *Archiver) SetReturnRead(r0 error) *Archiver {
	mock.impl.Read = func(io.Reader, string) error {
		return r0
	}
	return mock
}

// fakeZeroRead is a fake method which returns zero values.
func (mock Archiver) fakeZeroRead(input io.Reader, destination string) error {
	var (
		r0 error
	)
	return r0
}

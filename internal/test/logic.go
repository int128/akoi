package test

// Don't edit this file.
// This file is generated by gomic 0.5.2.
// https://github.com/suzuki-shunsuke/gomic

import (
	"context"
	"io"
	testing "testing"

	test "github.com/suzuki-shunsuke/akoi/internal/domain"
	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// Logic is a mock.
	Logic struct {
		t                      *testing.T
		name                   string
		callbackNotImplemented gomic.CallbackNotImplemented
		impl                   struct {
			Install                 func(ctx context.Context, params test.InstallParams) (test.Result, error)
			InstallPackage          func(ctx context.Context, pkg test.Package, params test.InstallParams) (test.Package, error)
			InstallFile             func(file *test.File, pkg test.Package, params test.InstallParams, tmpDir string, body io.Reader) error
			GetInstalledFiles       func(files []test.File) []test.File
			CreateLink              func(file test.File) (test.File, error)
			RecreateLink            func(file test.File) (test.File, error)
			RemoveFileAndCreateLink func(file test.File) (test.File, error)
			SetupConfig             func(cfg test.Config, cfgPath string) (test.Config, error)
			SetupPkgConfig          func(cfg test.Config, cfgDir, name string, pkg test.Package, numCPUs int) (test.Package, error)
			SetupFileConfig         func(pkg test.Package, cfgDir string, file test.File) (test.File, error)
		}
	}
)

// NewLogic returns Logic .
func NewLogic(t *testing.T, cb gomic.CallbackNotImplemented) *Logic {
	return &Logic{
		t: t, name: "Logic", callbackNotImplemented: cb}
}

// Install is a mock method.
func (mock Logic) Install(ctx context.Context, params test.InstallParams) (test.Result, error) {
	methodName := "Install" // nolint: goconst
	if mock.impl.Install != nil {
		return mock.impl.Install(ctx, params)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroInstall(ctx, params)
}

// SetFuncInstall sets a method and returns the mock.
func (mock *Logic) SetFuncInstall(impl func(ctx context.Context, params test.InstallParams) (test.Result, error)) *Logic {
	mock.impl.Install = impl
	return mock
}

// SetReturnInstall sets a fake method.
func (mock *Logic) SetReturnInstall(r0 test.Result, r1 error) *Logic {
	mock.impl.Install = func(context.Context, test.InstallParams) (test.Result, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroInstall is a fake method which returns zero values.
func (mock Logic) fakeZeroInstall(ctx context.Context, params test.InstallParams) (test.Result, error) {
	var (
		r0 test.Result
		r1 error
	)
	return r0, r1
}

// InstallPackage is a mock method.
func (mock Logic) InstallPackage(ctx context.Context, pkg test.Package, params test.InstallParams) (test.Package, error) {
	methodName := "InstallPackage" // nolint: goconst
	if mock.impl.InstallPackage != nil {
		return mock.impl.InstallPackage(ctx, pkg, params)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroInstallPackage(ctx, pkg, params)
}

// SetFuncInstallPackage sets a method and returns the mock.
func (mock *Logic) SetFuncInstallPackage(impl func(ctx context.Context, pkg test.Package, params test.InstallParams) (test.Package, error)) *Logic {
	mock.impl.InstallPackage = impl
	return mock
}

// SetReturnInstallPackage sets a fake method.
func (mock *Logic) SetReturnInstallPackage(r0 test.Package, r1 error) *Logic {
	mock.impl.InstallPackage = func(context.Context, test.Package, test.InstallParams) (test.Package, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroInstallPackage is a fake method which returns zero values.
func (mock Logic) fakeZeroInstallPackage(ctx context.Context, pkg test.Package, params test.InstallParams) (test.Package, error) {
	var (
		r0 test.Package
		r1 error
	)
	return r0, r1
}

// InstallFile is a mock method.
func (mock Logic) InstallFile(file *test.File, pkg test.Package, params test.InstallParams, tmpDir string, body io.Reader) error {
	methodName := "InstallFile" // nolint: goconst
	if mock.impl.InstallFile != nil {
		return mock.impl.InstallFile(file, pkg, params, tmpDir, body)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroInstallFile(file, pkg, params, tmpDir, body)
}

// SetFuncInstallFile sets a method and returns the mock.
func (mock *Logic) SetFuncInstallFile(impl func(file *test.File, pkg test.Package, params test.InstallParams, tmpDir string, body io.Reader) error) *Logic {
	mock.impl.InstallFile = impl
	return mock
}

// SetReturnInstallFile sets a fake method.
func (mock *Logic) SetReturnInstallFile(r0 error) *Logic {
	mock.impl.InstallFile = func(*test.File, test.Package, test.InstallParams, string, io.Reader) error {
		return r0
	}
	return mock
}

// fakeZeroInstallFile is a fake method which returns zero values.
func (mock Logic) fakeZeroInstallFile(file *test.File, pkg test.Package, params test.InstallParams, tmpDir string, body io.Reader) error {
	var (
		r0 error
	)
	return r0
}

// GetInstalledFiles is a mock method.
func (mock Logic) GetInstalledFiles(files []test.File) []test.File {
	methodName := "GetInstalledFiles" // nolint: goconst
	if mock.impl.GetInstalledFiles != nil {
		return mock.impl.GetInstalledFiles(files)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroGetInstalledFiles(files)
}

// SetFuncGetInstalledFiles sets a method and returns the mock.
func (mock *Logic) SetFuncGetInstalledFiles(impl func(files []test.File) []test.File) *Logic {
	mock.impl.GetInstalledFiles = impl
	return mock
}

// SetReturnGetInstalledFiles sets a fake method.
func (mock *Logic) SetReturnGetInstalledFiles(r0 []test.File) *Logic {
	mock.impl.GetInstalledFiles = func([]test.File) []test.File {
		return r0
	}
	return mock
}

// fakeZeroGetInstalledFiles is a fake method which returns zero values.
func (mock Logic) fakeZeroGetInstalledFiles(files []test.File) []test.File {
	var (
		r0 []test.File
	)
	return r0
}

// CreateLink is a mock method.
func (mock Logic) CreateLink(file test.File) (test.File, error) {
	methodName := "CreateLink" // nolint: goconst
	if mock.impl.CreateLink != nil {
		return mock.impl.CreateLink(file)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroCreateLink(file)
}

// SetFuncCreateLink sets a method and returns the mock.
func (mock *Logic) SetFuncCreateLink(impl func(file test.File) (test.File, error)) *Logic {
	mock.impl.CreateLink = impl
	return mock
}

// SetReturnCreateLink sets a fake method.
func (mock *Logic) SetReturnCreateLink(r0 test.File, r1 error) *Logic {
	mock.impl.CreateLink = func(test.File) (test.File, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroCreateLink is a fake method which returns zero values.
func (mock Logic) fakeZeroCreateLink(file test.File) (test.File, error) {
	var (
		r0 test.File
		r1 error
	)
	return r0, r1
}

// RecreateLink is a mock method.
func (mock Logic) RecreateLink(file test.File) (test.File, error) {
	methodName := "RecreateLink" // nolint: goconst
	if mock.impl.RecreateLink != nil {
		return mock.impl.RecreateLink(file)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroRecreateLink(file)
}

// SetFuncRecreateLink sets a method and returns the mock.
func (mock *Logic) SetFuncRecreateLink(impl func(file test.File) (test.File, error)) *Logic {
	mock.impl.RecreateLink = impl
	return mock
}

// SetReturnRecreateLink sets a fake method.
func (mock *Logic) SetReturnRecreateLink(r0 test.File, r1 error) *Logic {
	mock.impl.RecreateLink = func(test.File) (test.File, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroRecreateLink is a fake method which returns zero values.
func (mock Logic) fakeZeroRecreateLink(file test.File) (test.File, error) {
	var (
		r0 test.File
		r1 error
	)
	return r0, r1
}

// RemoveFileAndCreateLink is a mock method.
func (mock Logic) RemoveFileAndCreateLink(file test.File) (test.File, error) {
	methodName := "RemoveFileAndCreateLink" // nolint: goconst
	if mock.impl.RemoveFileAndCreateLink != nil {
		return mock.impl.RemoveFileAndCreateLink(file)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroRemoveFileAndCreateLink(file)
}

// SetFuncRemoveFileAndCreateLink sets a method and returns the mock.
func (mock *Logic) SetFuncRemoveFileAndCreateLink(impl func(file test.File) (test.File, error)) *Logic {
	mock.impl.RemoveFileAndCreateLink = impl
	return mock
}

// SetReturnRemoveFileAndCreateLink sets a fake method.
func (mock *Logic) SetReturnRemoveFileAndCreateLink(r0 test.File, r1 error) *Logic {
	mock.impl.RemoveFileAndCreateLink = func(test.File) (test.File, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroRemoveFileAndCreateLink is a fake method which returns zero values.
func (mock Logic) fakeZeroRemoveFileAndCreateLink(file test.File) (test.File, error) {
	var (
		r0 test.File
		r1 error
	)
	return r0, r1
}

// SetupConfig is a mock method.
func (mock Logic) SetupConfig(cfg test.Config, cfgPath string) (test.Config, error) {
	methodName := "SetupConfig" // nolint: goconst
	if mock.impl.SetupConfig != nil {
		return mock.impl.SetupConfig(cfg, cfgPath)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroSetupConfig(cfg, cfgPath)
}

// SetFuncSetupConfig sets a method and returns the mock.
func (mock *Logic) SetFuncSetupConfig(impl func(cfg test.Config, cfgPath string) (test.Config, error)) *Logic {
	mock.impl.SetupConfig = impl
	return mock
}

// SetReturnSetupConfig sets a fake method.
func (mock *Logic) SetReturnSetupConfig(r0 test.Config, r1 error) *Logic {
	mock.impl.SetupConfig = func(test.Config, string) (test.Config, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroSetupConfig is a fake method which returns zero values.
func (mock Logic) fakeZeroSetupConfig(cfg test.Config, cfgPath string) (test.Config, error) {
	var (
		r0 test.Config
		r1 error
	)
	return r0, r1
}

// SetupPkgConfig is a mock method.
func (mock Logic) SetupPkgConfig(cfg test.Config, cfgDir, name string, pkg test.Package, numCPUs int) (test.Package, error) {
	methodName := "SetupPkgConfig" // nolint: goconst
	if mock.impl.SetupPkgConfig != nil {
		return mock.impl.SetupPkgConfig(cfg, cfgDir, name, pkg, numCPUs)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroSetupPkgConfig(cfg, cfgDir, name, pkg, numCPUs)
}

// SetFuncSetupPkgConfig sets a method and returns the mock.
func (mock *Logic) SetFuncSetupPkgConfig(impl func(cfg test.Config, cfgDir, name string, pkg test.Package, numCPUs int) (test.Package, error)) *Logic {
	mock.impl.SetupPkgConfig = impl
	return mock
}

// SetReturnSetupPkgConfig sets a fake method.
func (mock *Logic) SetReturnSetupPkgConfig(r0 test.Package, r1 error) *Logic {
	mock.impl.SetupPkgConfig = func(test.Config, string, string, test.Package, int) (test.Package, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroSetupPkgConfig is a fake method which returns zero values.
func (mock Logic) fakeZeroSetupPkgConfig(cfg test.Config, cfgDir, name string, pkg test.Package, numCPUs int) (test.Package, error) {
	var (
		r0 test.Package
		r1 error
	)
	return r0, r1
}

// SetupFileConfig is a mock method.
func (mock Logic) SetupFileConfig(pkg test.Package, cfgDir string, file test.File) (test.File, error) {
	methodName := "SetupFileConfig" // nolint: goconst
	if mock.impl.SetupFileConfig != nil {
		return mock.impl.SetupFileConfig(pkg, cfgDir, file)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroSetupFileConfig(pkg, cfgDir, file)
}

// SetFuncSetupFileConfig sets a method and returns the mock.
func (mock *Logic) SetFuncSetupFileConfig(impl func(pkg test.Package, cfgDir string, file test.File) (test.File, error)) *Logic {
	mock.impl.SetupFileConfig = impl
	return mock
}

// SetReturnSetupFileConfig sets a fake method.
func (mock *Logic) SetReturnSetupFileConfig(r0 test.File, r1 error) *Logic {
	mock.impl.SetupFileConfig = func(test.Package, string, test.File) (test.File, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroSetupFileConfig is a fake method which returns zero values.
func (mock Logic) fakeZeroSetupFileConfig(pkg test.Package, cfgDir string, file test.File) (test.File, error) {
	var (
		r0 test.File
		r1 error
	)
	return r0, r1
}

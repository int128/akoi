package test

// Don't edit this file.
// This file is generated by gomic 0.5.5-0.
// https://github.com/suzuki-shunsuke/gomic

import (
	"io"
	"os"
	testing "testing"

	gomic "github.com/suzuki-shunsuke/gomic/gomic"
)

type (
	// FileSystem is a mock.
	FileSystem struct {
		t                      *testing.T
		name                   string
		callbackNotImplemented gomic.CallbackNotImplemented
		impl                   struct {
			Chmod        func(name string, mode os.FileMode) (r0 error)
			Copy         func(dst io.Writer, src io.Reader) (r0 int64, r1 error)
			ExistFile    func(p0 string) (r0 bool)
			ExpandEnv    func(p0 string) (r0 string)
			GetFileLstat func(p0 string) (r0 os.FileInfo, r1 error)
			GetFileStat  func(p0 string) (r0 os.FileInfo, r1 error)
			MkdirAll     func(p0 string) (r0 error)
			MkLink       func(src, dst string) (r0 error)
			Open         func(name string) (r0 io.ReadCloser, r1 error)
			OpenFile     func(name string, flag int, perm os.FileMode) (r0 io.WriteCloser, r1 error)
			ReadLink     func(p0 string) (r0 string, r1 error)
			RemoveAll    func(p0 string) (r0 error)
			RemoveFile   func(p0 string) (r0 error)
			RemoveLink   func(p0 string) (r0 error)
			TempDir      func() (r0 string, r1 error)
			WriteFile    func(dest string, data []byte) (r0 error)
		}
	}
)

// NewFileSystem returns FileSystem .
func NewFileSystem(t *testing.T, cb gomic.CallbackNotImplemented) *FileSystem {
	return &FileSystem{
		t: t, name: "FileSystem", callbackNotImplemented: cb}
}

// Chmod is a mock method.
func (mock FileSystem) Chmod(name string, mode os.FileMode) (r0 error) {
	methodName := "Chmod" // nolint: goconst
	if mock.impl.Chmod != nil {
		return mock.impl.Chmod(name, mode)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroChmod(name, mode)
}

// SetFuncChmod sets a method and returns the mock.
func (mock *FileSystem) SetFuncChmod(impl func(name string, mode os.FileMode) (r0 error)) *FileSystem {
	mock.impl.Chmod = impl
	return mock
}

// SetReturnChmod sets a fake method.
func (mock *FileSystem) SetReturnChmod(r0 error) *FileSystem {
	mock.impl.Chmod = func(string, os.FileMode) error {
		return r0
	}
	return mock
}

// fakeZeroChmod is a fake method which returns zero values.
func (mock FileSystem) fakeZeroChmod(name string, mode os.FileMode) (r0 error) {
	return r0
}

// Copy is a mock method.
func (mock FileSystem) Copy(dst io.Writer, src io.Reader) (r0 int64, r1 error) {
	methodName := "Copy" // nolint: goconst
	if mock.impl.Copy != nil {
		return mock.impl.Copy(dst, src)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroCopy(dst, src)
}

// SetFuncCopy sets a method and returns the mock.
func (mock *FileSystem) SetFuncCopy(impl func(dst io.Writer, src io.Reader) (r0 int64, r1 error)) *FileSystem {
	mock.impl.Copy = impl
	return mock
}

// SetReturnCopy sets a fake method.
func (mock *FileSystem) SetReturnCopy(r0 int64, r1 error) *FileSystem {
	mock.impl.Copy = func(io.Writer, io.Reader) (int64, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroCopy is a fake method which returns zero values.
func (mock FileSystem) fakeZeroCopy(dst io.Writer, src io.Reader) (r0 int64, r1 error) {
	return r0, r1
}

// ExistFile is a mock method.
func (mock FileSystem) ExistFile(p0 string) (r0 bool) {
	methodName := "ExistFile" // nolint: goconst
	if mock.impl.ExistFile != nil {
		return mock.impl.ExistFile(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroExistFile(p0)
}

// SetFuncExistFile sets a method and returns the mock.
func (mock *FileSystem) SetFuncExistFile(impl func(p0 string) (r0 bool)) *FileSystem {
	mock.impl.ExistFile = impl
	return mock
}

// SetReturnExistFile sets a fake method.
func (mock *FileSystem) SetReturnExistFile(r0 bool) *FileSystem {
	mock.impl.ExistFile = func(string) bool {
		return r0
	}
	return mock
}

// fakeZeroExistFile is a fake method which returns zero values.
func (mock FileSystem) fakeZeroExistFile(p0 string) (r0 bool) {
	return r0
}

// ExpandEnv is a mock method.
func (mock FileSystem) ExpandEnv(p0 string) (r0 string) {
	methodName := "ExpandEnv" // nolint: goconst
	if mock.impl.ExpandEnv != nil {
		return mock.impl.ExpandEnv(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroExpandEnv(p0)
}

// SetFuncExpandEnv sets a method and returns the mock.
func (mock *FileSystem) SetFuncExpandEnv(impl func(p0 string) (r0 string)) *FileSystem {
	mock.impl.ExpandEnv = impl
	return mock
}

// SetReturnExpandEnv sets a fake method.
func (mock *FileSystem) SetReturnExpandEnv(r0 string) *FileSystem {
	mock.impl.ExpandEnv = func(string) string {
		return r0
	}
	return mock
}

// fakeZeroExpandEnv is a fake method which returns zero values.
func (mock FileSystem) fakeZeroExpandEnv(p0 string) (r0 string) {
	return r0
}

// GetFileLstat is a mock method.
func (mock FileSystem) GetFileLstat(p0 string) (r0 os.FileInfo, r1 error) {
	methodName := "GetFileLstat" // nolint: goconst
	if mock.impl.GetFileLstat != nil {
		return mock.impl.GetFileLstat(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroGetFileLstat(p0)
}

// SetFuncGetFileLstat sets a method and returns the mock.
func (mock *FileSystem) SetFuncGetFileLstat(impl func(p0 string) (r0 os.FileInfo, r1 error)) *FileSystem {
	mock.impl.GetFileLstat = impl
	return mock
}

// SetReturnGetFileLstat sets a fake method.
func (mock *FileSystem) SetReturnGetFileLstat(r0 os.FileInfo, r1 error) *FileSystem {
	mock.impl.GetFileLstat = func(string) (os.FileInfo, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroGetFileLstat is a fake method which returns zero values.
func (mock FileSystem) fakeZeroGetFileLstat(p0 string) (r0 os.FileInfo, r1 error) {
	return r0, r1
}

// GetFileStat is a mock method.
func (mock FileSystem) GetFileStat(p0 string) (r0 os.FileInfo, r1 error) {
	methodName := "GetFileStat" // nolint: goconst
	if mock.impl.GetFileStat != nil {
		return mock.impl.GetFileStat(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroGetFileStat(p0)
}

// SetFuncGetFileStat sets a method and returns the mock.
func (mock *FileSystem) SetFuncGetFileStat(impl func(p0 string) (r0 os.FileInfo, r1 error)) *FileSystem {
	mock.impl.GetFileStat = impl
	return mock
}

// SetReturnGetFileStat sets a fake method.
func (mock *FileSystem) SetReturnGetFileStat(r0 os.FileInfo, r1 error) *FileSystem {
	mock.impl.GetFileStat = func(string) (os.FileInfo, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroGetFileStat is a fake method which returns zero values.
func (mock FileSystem) fakeZeroGetFileStat(p0 string) (r0 os.FileInfo, r1 error) {
	return r0, r1
}

// MkdirAll is a mock method.
func (mock FileSystem) MkdirAll(p0 string) (r0 error) {
	methodName := "MkdirAll" // nolint: goconst
	if mock.impl.MkdirAll != nil {
		return mock.impl.MkdirAll(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroMkdirAll(p0)
}

// SetFuncMkdirAll sets a method and returns the mock.
func (mock *FileSystem) SetFuncMkdirAll(impl func(p0 string) (r0 error)) *FileSystem {
	mock.impl.MkdirAll = impl
	return mock
}

// SetReturnMkdirAll sets a fake method.
func (mock *FileSystem) SetReturnMkdirAll(r0 error) *FileSystem {
	mock.impl.MkdirAll = func(string) error {
		return r0
	}
	return mock
}

// fakeZeroMkdirAll is a fake method which returns zero values.
func (mock FileSystem) fakeZeroMkdirAll(p0 string) (r0 error) {
	return r0
}

// MkLink is a mock method.
func (mock FileSystem) MkLink(src, dst string) (r0 error) {
	methodName := "MkLink" // nolint: goconst
	if mock.impl.MkLink != nil {
		return mock.impl.MkLink(src, dst)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroMkLink(src, dst)
}

// SetFuncMkLink sets a method and returns the mock.
func (mock *FileSystem) SetFuncMkLink(impl func(src, dst string) (r0 error)) *FileSystem {
	mock.impl.MkLink = impl
	return mock
}

// SetReturnMkLink sets a fake method.
func (mock *FileSystem) SetReturnMkLink(r0 error) *FileSystem {
	mock.impl.MkLink = func(string, string) error {
		return r0
	}
	return mock
}

// fakeZeroMkLink is a fake method which returns zero values.
func (mock FileSystem) fakeZeroMkLink(src, dst string) (r0 error) {
	return r0
}

// Open is a mock method.
func (mock FileSystem) Open(name string) (r0 io.ReadCloser, r1 error) {
	methodName := "Open" // nolint: goconst
	if mock.impl.Open != nil {
		return mock.impl.Open(name)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroOpen(name)
}

// SetFuncOpen sets a method and returns the mock.
func (mock *FileSystem) SetFuncOpen(impl func(name string) (r0 io.ReadCloser, r1 error)) *FileSystem {
	mock.impl.Open = impl
	return mock
}

// SetReturnOpen sets a fake method.
func (mock *FileSystem) SetReturnOpen(r0 io.ReadCloser, r1 error) *FileSystem {
	mock.impl.Open = func(string) (io.ReadCloser, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroOpen is a fake method which returns zero values.
func (mock FileSystem) fakeZeroOpen(name string) (r0 io.ReadCloser, r1 error) {
	return r0, r1
}

// OpenFile is a mock method.
func (mock FileSystem) OpenFile(name string, flag int, perm os.FileMode) (r0 io.WriteCloser, r1 error) {
	methodName := "OpenFile" // nolint: goconst
	if mock.impl.OpenFile != nil {
		return mock.impl.OpenFile(name, flag, perm)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroOpenFile(name, flag, perm)
}

// SetFuncOpenFile sets a method and returns the mock.
func (mock *FileSystem) SetFuncOpenFile(impl func(name string, flag int, perm os.FileMode) (r0 io.WriteCloser, r1 error)) *FileSystem {
	mock.impl.OpenFile = impl
	return mock
}

// SetReturnOpenFile sets a fake method.
func (mock *FileSystem) SetReturnOpenFile(r0 io.WriteCloser, r1 error) *FileSystem {
	mock.impl.OpenFile = func(string, int, os.FileMode) (io.WriteCloser, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroOpenFile is a fake method which returns zero values.
func (mock FileSystem) fakeZeroOpenFile(name string, flag int, perm os.FileMode) (r0 io.WriteCloser, r1 error) {
	return r0, r1
}

// ReadLink is a mock method.
func (mock FileSystem) ReadLink(p0 string) (r0 string, r1 error) {
	methodName := "ReadLink" // nolint: goconst
	if mock.impl.ReadLink != nil {
		return mock.impl.ReadLink(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroReadLink(p0)
}

// SetFuncReadLink sets a method and returns the mock.
func (mock *FileSystem) SetFuncReadLink(impl func(p0 string) (r0 string, r1 error)) *FileSystem {
	mock.impl.ReadLink = impl
	return mock
}

// SetReturnReadLink sets a fake method.
func (mock *FileSystem) SetReturnReadLink(r0 string, r1 error) *FileSystem {
	mock.impl.ReadLink = func(string) (string, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroReadLink is a fake method which returns zero values.
func (mock FileSystem) fakeZeroReadLink(p0 string) (r0 string, r1 error) {
	return r0, r1
}

// RemoveAll is a mock method.
func (mock FileSystem) RemoveAll(p0 string) (r0 error) {
	methodName := "RemoveAll" // nolint: goconst
	if mock.impl.RemoveAll != nil {
		return mock.impl.RemoveAll(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroRemoveAll(p0)
}

// SetFuncRemoveAll sets a method and returns the mock.
func (mock *FileSystem) SetFuncRemoveAll(impl func(p0 string) (r0 error)) *FileSystem {
	mock.impl.RemoveAll = impl
	return mock
}

// SetReturnRemoveAll sets a fake method.
func (mock *FileSystem) SetReturnRemoveAll(r0 error) *FileSystem {
	mock.impl.RemoveAll = func(string) error {
		return r0
	}
	return mock
}

// fakeZeroRemoveAll is a fake method which returns zero values.
func (mock FileSystem) fakeZeroRemoveAll(p0 string) (r0 error) {
	return r0
}

// RemoveFile is a mock method.
func (mock FileSystem) RemoveFile(p0 string) (r0 error) {
	methodName := "RemoveFile" // nolint: goconst
	if mock.impl.RemoveFile != nil {
		return mock.impl.RemoveFile(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroRemoveFile(p0)
}

// SetFuncRemoveFile sets a method and returns the mock.
func (mock *FileSystem) SetFuncRemoveFile(impl func(p0 string) (r0 error)) *FileSystem {
	mock.impl.RemoveFile = impl
	return mock
}

// SetReturnRemoveFile sets a fake method.
func (mock *FileSystem) SetReturnRemoveFile(r0 error) *FileSystem {
	mock.impl.RemoveFile = func(string) error {
		return r0
	}
	return mock
}

// fakeZeroRemoveFile is a fake method which returns zero values.
func (mock FileSystem) fakeZeroRemoveFile(p0 string) (r0 error) {
	return r0
}

// RemoveLink is a mock method.
func (mock FileSystem) RemoveLink(p0 string) (r0 error) {
	methodName := "RemoveLink" // nolint: goconst
	if mock.impl.RemoveLink != nil {
		return mock.impl.RemoveLink(p0)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroRemoveLink(p0)
}

// SetFuncRemoveLink sets a method and returns the mock.
func (mock *FileSystem) SetFuncRemoveLink(impl func(p0 string) (r0 error)) *FileSystem {
	mock.impl.RemoveLink = impl
	return mock
}

// SetReturnRemoveLink sets a fake method.
func (mock *FileSystem) SetReturnRemoveLink(r0 error) *FileSystem {
	mock.impl.RemoveLink = func(string) error {
		return r0
	}
	return mock
}

// fakeZeroRemoveLink is a fake method which returns zero values.
func (mock FileSystem) fakeZeroRemoveLink(p0 string) (r0 error) {
	return r0
}

// TempDir is a mock method.
func (mock FileSystem) TempDir() (r0 string, r1 error) {
	methodName := "TempDir" // nolint: goconst
	if mock.impl.TempDir != nil {
		return mock.impl.TempDir()
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroTempDir()
}

// SetFuncTempDir sets a method and returns the mock.
func (mock *FileSystem) SetFuncTempDir(impl func() (r0 string, r1 error)) *FileSystem {
	mock.impl.TempDir = impl
	return mock
}

// SetReturnTempDir sets a fake method.
func (mock *FileSystem) SetReturnTempDir(r0 string, r1 error) *FileSystem {
	mock.impl.TempDir = func() (string, error) {
		return r0, r1
	}
	return mock
}

// fakeZeroTempDir is a fake method which returns zero values.
func (mock FileSystem) fakeZeroTempDir() (r0 string, r1 error) {
	return r0, r1
}

// WriteFile is a mock method.
func (mock FileSystem) WriteFile(dest string, data []byte) (r0 error) {
	methodName := "WriteFile" // nolint: goconst
	if mock.impl.WriteFile != nil {
		return mock.impl.WriteFile(dest, data)
	}
	if mock.callbackNotImplemented != nil {
		mock.callbackNotImplemented(mock.t, mock.name, methodName)
	} else {
		gomic.DefaultCallbackNotImplemented(mock.t, mock.name, methodName)
	}
	return mock.fakeZeroWriteFile(dest, data)
}

// SetFuncWriteFile sets a method and returns the mock.
func (mock *FileSystem) SetFuncWriteFile(impl func(dest string, data []byte) (r0 error)) *FileSystem {
	mock.impl.WriteFile = impl
	return mock
}

// SetReturnWriteFile sets a fake method.
func (mock *FileSystem) SetReturnWriteFile(r0 error) *FileSystem {
	mock.impl.WriteFile = func(string, []byte) error {
		return r0
	}
	return mock
}

// fakeZeroWriteFile is a fake method which returns zero values.
func (mock FileSystem) fakeZeroWriteFile(dest string, data []byte) (r0 error) {
	return r0
}
